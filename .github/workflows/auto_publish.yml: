name: PublicaÃ§Ã£o AutomÃ¡tica de Loterias

on:
  schedule:
    - cron: "*/30 * * * *"   # roda a cada 30 minutos (UTC)
  workflow_dispatch:         # permite rodar manualmente

concurrency:
  group: twitter-loteria-bot
  cancel-in-progress: true

jobs:
  run:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout do repositÃ³rio
        uses: actions/checkout@v4

      - name: Configurar Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Cache do pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Instalar dependÃªncias
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Checa pendÃªncias na planilha usando funÃ§Ãµes do prÃ³prio bot.py
      - name: Verificar pendÃªncias
        id: check
        env:
          GOOGLE_SERVICE_JSON: ${{ secrets.GOOGLE_SERVICE_JSON }}
          BACKLOG_DAYS: "1"
        run: |
          python - <<'PY'
          import os, datetime
          from bot import ler_registros_sem_duplicados, linhas_pendentes, TZ
          BACKLOG_DAYS = int(os.getenv("BACKLOG_DAYS","1"))
          hoje = datetime.datetime.now(TZ).date()
          inicio = hoje - datetime.timedelta(days=BACKLOG_DAYS)
          dados = ler_registros_sem_duplicados()
          pend = linhas_pendentes(dados, inicio, hoje)
          has = 'true' if len(pend) > 0 else 'false'
          print(f"ðŸ”Ž PendÃªncias encontradas: {len(pend)}")
          # exporta para o output do step
          with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
              f.write(f"has_pendencias={has}\n")
          PY

      - name: Executar o bot (sÃ³ se houver pendÃªncias)
        if: steps.check.outputs.has_pendencias == 'true'
        env:
          GOOGLE_SERVICE_JSON: ${{ secrets.GOOGLE_SERVICE_JSON }}

          # ==== Conta 1 ====
          TWITTER_API_KEY_1: ${{ secrets.TWITTER_API_KEY_1 }}
          TWITTER_API_SECRET_1: ${{ secrets.TWITTER_API_SECRET_1 }}
          TWITTER_ACCESS_TOKEN_1: ${{ secrets.TWITTER_ACCESS_TOKEN_1 }}
          TWITTER_ACCESS_TOKEN_SECRET_1: ${{ secrets.TWITTER_ACCESS_TOKEN_SECRET_1 }}

          # ==== Conta 2 ====
          TWITTER_API_KEY_2: ${{ secrets.TWITTER_API_KEY_2 }}
          TWITTER_API_SECRET_2: ${{ secrets.TWITTER_API_SECRET_2 }}
          TWITTER_ACCESS_TOKEN_2: ${{ secrets.TWITTER_ACCESS_TOKEN_2 }}
          TWITTER_ACCESS_TOKEN_SECRET_2: ${{ secrets.TWITTER_ACCESS_TOKEN_SECRET_2 }}

          # ==== ExecuÃ§Ã£o ====
          BACKLOG_DAYS: "1"
          MAX_TWEETS_PER_RUN: "10"
          RATE_DELAY_SECONDS: "120"
          RATE_BACKOFF_SECONDS: "900"
          LOOP_MODE: "false"
        run: python bot.py
