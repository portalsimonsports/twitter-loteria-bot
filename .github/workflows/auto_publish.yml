name: Publica√ß√£o Autom√°tica de Loterias

on:
  schedule:
    # Executa a cada 30 minutos (*/30 * * * *)
    - cron: "*/30 * * * *"
  workflow_dispatch: # Permite execu√ß√£o manual a qualquer hora

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  run:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout do reposit√≥rio
        uses: actions/checkout@v4

      - name: Configurar Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Instalar depend√™ncias
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install -r requirements.txt --no-cache-dir
          pip install gspread oauth2client # Adicionado para manipular Google Sheets

      - name: Verificar pend√™ncias e condi√ß√£o da coluna H
        env:
          GOOGLE_SERVICE_JSON: ${{ secrets.GOOGLE_SERVICE_JSON }}

          # Conta 1 (OBRIGAT√ìRIA)
          TWITTER_API_KEY_1: ${{ secrets.TWITTER_API_KEY_1 }}
          TWITTER_API_SECRET_1: ${{ secrets.TWITTER_API_SECRET_1 }}
          TWITTER_ACCESS_TOKEN_1: ${{ secrets.TWITTER_ACCESS_TOKEN_1 }}
          TWITTER_ACCESS_TOKEN_SECRET_1: ${{ secrets.TWITTER_ACCESS_SECRET_1 }}

          # Conta 2 (OPCIONAL)
          TWITTER_API_KEY_2: ${{ secrets.TWITTER_API_KEY_2 }}
          TWITTER_API_SECRET_2: ${{ secrets.TWITTER_API_SECRET_2 }}
          TWITTER_ACCESS_TOKEN_2: ${{ secrets.TWITTER_ACCESS_TOKEN_2 }}
          TWITTER_ACCESS_TOKEN_SECRET_2: ${{ secrets.TWITTER_ACCESS_SECRET_2 }}

          # Configura√ß√£o do bot
          BACKLOG_DAYS: ${{ secrets.BACKLOG_DAYS }}
          MAX_TWEETS_PER_RUN: ${{ secrets.MAX_TWEETS_PER_RUN }}
          RATE_DELAY_SECONDS: ${{ secrets.RATE_DELAY_SECONDS }}
          RATE_BACKOFF_SECONDS: ${{ secrets.RATE_BACKOFF_SECONDS }}
          LOOP_MODE: ${{ secrets.LOOP_MODE }}
        run: |
          echo "üîé Verificando vari√°veis de ambiente e condi√ß√£o da coluna H..."
          python - <<'PY'
          import os
          import sys
          import json
          import gspread
          from oauth2client.service_account import ServiceAccountCredentials

          # Verificar vari√°veis obrigat√≥rias
          def is_set(k: str) -> bool:
              v = os.getenv(k)
              return bool(v and str(v).strip())

          missing = []
          required = [
              "GOOGLE_SERVICE_JSON",
              "TWITTER_API_KEY_1", "TWITTER_API_SECRET_1",
              "TWITTER_ACCESS_TOKEN_1", "TWITTER_ACCESS_TOKEN_SECRET_1",
          ]
          for k in required:
              if not is_set(k):
                  missing.append(k)

          if missing:
              print("‚ùå Faltam vari√°veis obrigat√≥rias:", missing)
              sys.exit(1)

          # Verificar condi√ß√£o da coluna H (procura por c√©lulas vazias)
          scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
          creds = ServiceAccountCredentials.from_json_keyfile_dict(json.loads(os.getenv("GOOGLE_SERVICE_JSON")), scope)
          client = gspread.authorize(creds)

          # Substitua pelo ID da sua planilha e nome da aba
          spreadsheet_id = "SEU_SPREADSHEET_ID"  # Insira o ID da sua planilha Google Sheets
          sheet = client.open_by_key(spreadsheet_id).sheet1  # Use a aba desejada (sheet1 √© a padr√£o)

          # Obter a coluna H (√≠ndice 7, come√ßando de 0)
          column_h = sheet.col_values(8)  # Coluna H √© a 8¬™ coluna
          has_empty = any(not cell.strip() for cell in column_h if cell)  # Verifica se h√° c√©lula vazia

          if not has_empty:
              print("‚ùå Nenhuma c√©lula vazia encontrada na coluna H. Publica√ß√£o n√£o ser√° executada.")
              sys.exit(0)  # Sai com sucesso, mas n√£o prossegue
          else:
              print("‚úÖ C√©lula vazia encontrada na coluna H. Prosseguindo com a publica√ß√£o.")

          # Verifica√ß√£o opcional da Conta 2
          c2 = [
              "TWITTER_API_KEY_2", "TWITTER_API_SECRET_2",
              "TWITTER_ACCESS_TOKEN_2", "TWITTER_ACCESS_TOKEN_SECRET_2",
          ]
          c2_set = [k for k in c2 if is_set(k)]
          if c2_set and len(c2_set) != len(c2):
              print("‚ö†Ô∏è Conta #2 parcialmente configurada. Ser√° IGNORADA.")
              print("   Presentes:", c2_set)
              print("   Faltando:", [k for k in c2 if k not in c2_set])
          elif len(c2_set) == len(c2) and c2_set:
              print("‚úÖ Conta #2: configurada (todas as vari√°veis presentes).")
          else:
              print("‚ÑπÔ∏è Conta #2: n√£o configurada (ser√° ignorada).")
          PY

      - name: Executar o bot
        env:
          GOOGLE_SERVICE_JSON: ${{ secrets.GOOGLE_SERVICE_JSON }}

          # Conta 1 (OBRIGAT√ìRIA)
          TWITTER_API_KEY_1: ${{ secrets.TWITTER_API_KEY_1 }}
          TWITTER_API_SECRET_1: ${{ secrets.TWITTER_API_SECRET_1 }}
          TWITTER_ACCESS_TOKEN_1: ${{ secrets.TWITTER_ACCESS_TOKEN_1 }}
          TWITTER_ACCESS_TOKEN_SECRET_1: ${{ secrets.TWITTER_ACCESS_SECRET_1 }}

          # Conta 2 (OPCIONAL ‚Äî se estiver parcial, o bot deve ignorar)
          TWITTER_API_KEY_2: ${{ secrets.TWITTER_API_KEY_2 }}
          TWITTER_API_SECRET_2: ${{ secrets.TWITTER_API_SECRET_2 }}
          TWITTER_ACCESS_TOKEN_2: ${{ secrets.TWITTER_ACCESS_TOKEN_2 }}
          TWITTER_ACCESS_TOKEN_SECRET_2: ${{ secrets.TWITTER_ACCESS_SECRET_2 }}

          # Configura√ß√£o do bot
          BACKLOG_DAYS: ${{ secrets.BACKLOG_DAYS }}
          MAX_TWEETS_PER_RUN: ${{ secrets.MAX_TWEETS_PER_RUN }}
          RATE_DELAY_SECONDS: ${{ secrets.RATE_DELAY_SECONDS }}
          RATE_BACKOFF_SECONDS: ${{ secrets.RATE_BACKOFF_SECONDS }}
          LOOP_MODE: ${{ secrets.LOOP_MODE }}
        run: |
          echo "üöÄ Executando o bot de publica√ß√£o..."
          python bot.py
